// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  schoolId   Int    @id @default(autoincrement())
  schoolName String @db.VarChar(500)
  schoolRef  String @unique
  classrooms  Classroom[] // Relation 1-n avec Classroom
  users User[] //relation 1-n avec user
}

model Classroom {
  classroomId   Int    @id @default(autoincrement())
  classroomNumber Int //le num√©ro de la salle
  classroomOrder Int @default(0) // üëà valeur par d√©faut, ordre d'affichage des classes
  classroomBorderColor String @db.VarChar(255)
  classroomBackgroundColor String @db.VarChar(255)
  classroomColor String @db.VarChar(255)
  classroomRef String @unique
  schoolId        Int?    // cl√© √©trang√®re optionnelle donc NULL si pas d'association avec une √©cole
  school          School? @relation(fields: [schoolId], references: [schoolId], onDelete: SetNull)

  @@unique([classroomRef, schoolId])
  groupId Int?      @unique  // cl√© √©trang√®re optionnelle vers Group
  group   Group?     @relation(fields: [groupId], references: [groupId], onDelete: SetNull)
}



model Link {
  linkId             Int     @id @default(autoincrement())
  linkName           String  @db.VarChar(500)

  linkTitleFr        String @db.VarChar(500) @default("")
  linkTitleBr        String @db.VarChar(500) @default("")
  linkFullNameFr     String @db.VarChar(500) @default("")
  linkFullNameBr     String @db.VarChar(500) @default("")

  linkRedirection    String
  linkIcon           String  @db.VarChar(255)
  linkMatter         String  @db.VarChar(50)

  linkDescriptionFr  String @db.Text @default("")
  linkDescriptionBr  String @db.Text @default("")

  linkType           String  @db.VarChar(50) @default("all")

  groupLinks GroupLink[] // Relation avec la table de liaison GroupLink
  userLinks LinkUser[] // Relation avec la table de liaison GroupLink

}

model GroupLink {
  group   Group  @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId Int

  link        Link       @relation(fields: [linkId], references: [linkId], onDelete: Cascade)
  linkId      Int

  @@id([groupId, linkId]) // cl√© composite
}

model Group {
  groupId Int     @id @default(autoincrement())
  groupName String @db.VarChar(255)
  groupLanguage String @db.VarChar(50)
  groupPrincipal Boolean

  classroom Classroom?  // relation 1-1 inverse
  groupLinks GroupLink[] // Relation avec la table de liaison GroupLink
  groupUsers GroupUser[]
}

model User {
   userId             Int     @id @default(autoincrement())
   userFamilyName String  @db.VarChar(50)
   userFirstName String  @db.VarChar(50)
   userPseudo String? @db.VarChar(50)   @unique
   userPsswd String? @db.VarChar(255) 
   userMail String? @db.VarChar(255) @unique
   userIcon String @db.VarChar(50) @default("user_student.png")

   gradeId        Int?    // cl√© √©trang√®re optionnelle donc NULL si pas d'association avec un niveau scolaire
   grade          Grade? @relation(fields: [gradeId], references: [gradeId], onDelete: SetNull)

   schoolId Int? // cl√© √©trang√®re optionnelle donc NULL si pas d'association avec une √©cole
   school   School? @relation(fields: [schoolId], references: [schoolId], onDelete: SetNull)

  userLinks LinkUser[] 
  userGroups GroupUser[]
  userRoles RoleUser[]
}

model Role {
  roleId Int @id @default(autoincrement())
  roleName String @db.VarChar(50)

  roleUsers RoleUser[]
  }

model RoleUser{
  user   User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  roles        Role       @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  roleId      Int

  @@id([userId, roleId]) // cl√© composite
}

model GroupUser {
  user   User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  group        Group       @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId      Int

  principal Boolean @default(false)

  @@id([userId, groupId]) // cl√© composite
}

model LinkUser {
  user   User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  link        Link       @relation(fields: [linkId], references: [linkId], onDelete: Cascade)
  linkId      Int

  @@id([userId, linkId]) // cl√© composite
}

model Grade {
  gradeId Int @id @default(autoincrement())
  gradeName String @db.VarChar(50)
  users  User[] // Relation 1-n avec Classroom

}